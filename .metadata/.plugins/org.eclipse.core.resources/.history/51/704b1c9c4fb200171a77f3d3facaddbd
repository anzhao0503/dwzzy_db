/*
 * storage.cpp
 *
 *  Created on: Oct 15, 2017
 *      Author: wcw
 */
#include "storage.h"

BufferTableItem ::BufferTableItem(int index):   index(index), page_entry(-1), in_buffer(false), is_written(false), U(false), M(false) {}

StorageManagement::StorageManagement() {
	this->last_used = 0;
	this->InitBufferTable();
}

StorageManagement::~StorageManagement() {

}

void StorageManagement::InitBufferTable() {
	for (int i = 0; i < BUFFER_SIZE; i ++) {
		this->buffer_table[i] = BufferTableItem(i);
	}
}

int StorageManagement::HitBuffer(ADDR page_entry) {
	int index = -1;
	int i = 0;
	while (i < BUFFER_SIZE && buffer_table[i].in_buffer == true) {
		if (buffer_table[i].page_entry == page_entry) {
			return i;
		}
		i++;
	}
	return index;
}

BufferTableItem* StorageManagement::NRU(BufferTableItem* buffer_table) {
	// 如果有空闲空间，返回第一个空闲空间位置
	for (int i = 0; i < BUFFER_SIZE; i ++) {
		if (buffer_table[i].in_buffer == false) {
			this->last_used = i;
			return &buffer_table[i];
		}
	}
	int i = this->last_used + 1;
	while (true) {
		int index = i % BUFFER_SIZE;
		// 第一轮扫描
		while (index <= last_used) {
			if (buffer_table[index].M == false && buffer_table[index].U == false) {
				// 既未被访问过，也未被修改过
				this->last_used = index;
				return &buffer_table[index];
			}
			i++;
			index = i % BUFFER_SIZE;
		}
		// 第二轮扫描
		while (index <= last_used) {
			if ( buffer_table[index].U == false && buffer_table[index].M == true) {
				// 被修改过未被访问过
				if (buffer_table[index].is_written == true) {
					// 换出的块需要写回硬盘
					// WriteFile将原位置变成空闲空间，在文件后面追加？
					this->WriteFile(buffer_table[index].page_entry, buffer[index].frame_content, PAGE_SIZE);
				}
				buffer_table[index].in_buffer = false;
				this->last_used = index;
				return &buffer_table[index];
			}
			buffer_table[index].U = false;
			i++;
			index = i % BUFFER_SIZE;
		}
		// 重复一二轮扫描
	}
}

int StorageManagement::ReadBuffer(ADDR page_entry, void *buf, unsigned int length) {
	int index = this->HitBuffer(page_entry);
	BufferTableItem* item = NULL;
	if (index < 0) {
		// 未命中
		item = this->NRU(this->buffer_table);
		unsigned int swap_index = item->index;
		// 将要读的内容写入缓冲区
		// length实际上就是PAGE_SIZE，LoadPage需要根据page_entry找到seg_id, page_id和offset，判断是否valid
		// 在文件中读入offset偏移量后的length长度的内容
		int ret = this->LoadPage(page_entry, buffer[swap_index].frame_content, length);
		if (ret < 0) {
			cout << "Content does not exist in file" << endl;
			return ret;
		}
		// 更改BufferTable表项
		item->page_entry = page_entry;
		item->in_buffer = true;
		item->U = true;
		item->M = true;
		return this->ReadBuffer(page_entry, buf, length);
	}
	else {
		//命中
		memcpy(buf, buffer[index].frame_content, length);
		this->buffer_table[index].U = true;
		return length;
	}
}

int StorageManagement::WriteBuffer(ADDR page_entry, const void *buf, unsigned int length) {
	int index = this->HitBuffer(page_entry);
	BufferTableItem* item = NULL;
	if (index < 0) {
		// 未命中，更改要换出的BufferTable表项
		item = this->NRU(this->buffer_table);
		item->page_entry = page_entry;
		item->in_buffer = true;
		return this->WriteBuffer(page_entry, buf, length);
	}
	else {
		// 命中，修改缓冲区
		memcpy(buffer[index].frame_content, buf, length);
		// 更改BufferTable表项
		this->buffer_table[index].is_written = true;
		this->buffer_table[index].in_buffer = true;
		this->buffer_table[index].U = true;
		this->buffer_table[index].M = true;
		return length;
	}
}

void StorageManagement::FlushBuffer() {
	for (int i = 0; i < BUFFER_SIZE; i++) {
		if (this->buffer_table[i].is_written == true) {
			this->WriteFile(buffer_table[i].page_entry, buffer[i].frame_content, PAGE_SIZE);
			this->buffer_table[i] = BufferTableItem(i);
		}
	}
}
unsigned int StorageManagement::GetSegId(ADDR page_entry){
	unsigned int seg_id;
	seg_id = (page_entry >> (PAGE_BIT+OFFSET_BIT)) & 0XFFF;
	return seg_id;
}
unsigned int StorageManagement::GetPageId(ADDR page_entry){
	unsigned int page_id;
	page_id = (page_entry >> OFFSET_BIT) & 0XFF;
	return page_id;
}
unsigned int StorageManagement::GetOffset(ADDR page_entry){
	unsigned int offset;
	offset = page_entry & 0XFFF;
	return offset;
}
int main()
{
	return 1;
}




