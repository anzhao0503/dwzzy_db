/*
 * storage.h
 *
 *  Created on: Oct 15, 2017
 *      Author: wcw
 */

#include<iostream>
#include<cstring>
#include <stdio.h>
#include <stdlib.h>
#include <fstream>
#include<stack>
#include <unistd.h>
#include <sys/types.h>

using namespace std;


#define BUFFER_SIZE		16
#define PAGE_SIZE		1024 * 4
#define MAX_SEG_SIZE	256 * 1024 * 4
/*
 * address space 8M
 * per tuple 512B
 * MAX_TUPLE_SIZE 512 Bytes
 * seg_id | page_id | offset
 * store 4GB data
 */
#define MAX_TUPLE_SIZE 512
#define SEG_BIT 4
#define PAGE_BIT 16
#define OFFSET_BIT 12
#define OFFSET_MASK 0XFFF
#define PAGE_MASK	0XFFFF
#define	SEG_MASK	0XF

# define ADDR unsigned long

class Frame {
public:
	unsigned int frame_id;
	bool is_valid;
//	unsigned char  frame_content[PAGE_SIZE];

	Frame();
};
class Page {
public:
	unsigned int page_id;
	unsigned int free_tuples;//bit map
	Frame frame;

	Page();
};

class Segment {
public:
	unsigned int seg_id;
	unsigned int start; //start from which frame id
	Page* page_table;
	stack<unsigned int> free_pages;

	Segment();
	int SetFreePage(unsigned int page_id);
	unsigned int GetFreePage();
};

class SegmentTable {
public:
	Segment *segment_table;
	SegmentTable(){
		this->segment_table =
	}
};

class BufferTableItem {
public:
	int index; //在Buffer_table中的index
	ADDR virtual_addr;
	bool in_buffer;
	// 换出时是否需要写回硬盘
	bool is_written;
	// NRU标志位
	bool U;
	bool M;
	BufferTableItem();
	BufferTableItem(int index);
};

class StorageManagement {
private:
	FILE *fd; //for file operations
	int last_used; //置换策略中上一次访问的位置

	void InitBufferTable();
	int HitBuffer(ADDR virtual_addr);
	BufferTableItem* NRU(BufferTableItem* buffer_table);

//	unsigned int GetAddress(ADDR virtual_addr);
/*
 * parse address
 */
	ADDR GetPageId(ADDR virtual_addr);
	ADDR GetSegId(ADDR virtual_addr);
	ADDR GetOffset(ADDR virtual_addr);

	int LoadPage(ADDR virtual_addr, void *buf);//copy one page from fd to buf
	Page* AllocPage();
	int WriteFile(ADDR virtual_addr, const void *buf, unsigned int length);//virtual_addr <- alloc
public:
	BufferTableItem  buffer_table[BUFFER_SIZE];
	Frame buffer[BUFFER_SIZE];
	Segment* segment_table;

	StorageManagement();
	~StorageManagement();

	void InitStorage(char *path);
	int ReadBuffer(ADDR virtual_addr, void *buf, unsigned int length);
	int WriteBuffer(ADDR virtual_addr, const void *buf, unsigned int length);
	void FlushBuffer();
};
